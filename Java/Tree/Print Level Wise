import java.util.LinkedList;
import java.util.Queue;
public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
	
	
	public static void printLevelWise(TreeNode<Integer> root){
		/* Your class should be named Solution 
 		 * Don't write main(). 
		 * Don't read input, it is passed as function argument. 
		 * Print output and don't return it. 
		 * Taking input is handled automatically. 
		 */
         Queue<TreeNode> pendingNodes=new LinkedList<>();
         pendingNodes.add(root);
       
        while(!pendingNodes.isEmpty())
        {
            int size=pendingNodes.size();
            while(size>0){
             
            TreeNode<Integer> frontNode=pendingNodes.poll();
            System.out.print(frontNode.data+" ");
            
          
          for(int i=0;i<frontNode.children.size();i++){
            pendingNodes.add(frontNode.children.get(i));
          }  
            size--;
                
            }
          
          System.out.println();
              
           
         
        }
        
        
	}
		
}
